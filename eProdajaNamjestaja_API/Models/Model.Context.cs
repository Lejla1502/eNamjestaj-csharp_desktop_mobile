//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eProdajaNamjestaja_API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class eNamjestajEntities : DbContext
    {
        public eNamjestajEntities()
            : base("name=eNamjestajEntities")
        {
            Configuration.ProxyCreationEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Dobavljaci> Dobavljaci { get; set; }
        public virtual DbSet<Izlazi> Izlazi { get; set; }
        public virtual DbSet<IzlaziStavke> IzlaziStavke { get; set; }
        public virtual DbSet<Korisnici> Korisnici { get; set; }
        public virtual DbSet<KorisniciUloge> KorisniciUloge { get; set; }
        public virtual DbSet<Kupci> Kupci { get; set; }
        public virtual DbSet<NarudzbaStavke> NarudzbaStavke { get; set; }
        public virtual DbSet<Narudzbe> Narudzbe { get; set; }
        public virtual DbSet<Ocjene> Ocjene { get; set; }
        public virtual DbSet<Skladista> Skladista { get; set; }
        public virtual DbSet<SkladistaProizvod> SkladistaProizvod { get; set; }
        public virtual DbSet<Ulazi> Ulazi { get; set; }
        public virtual DbSet<UlaziStavke> UlaziStavke { get; set; }
        public virtual DbSet<Uloge> Uloge { get; set; }
        public virtual DbSet<VrsteProizvoda> VrsteProizvoda { get; set; }
        public virtual DbSet<ModelProizvoda> ModelProizvoda { get; set; }
        public virtual DbSet<TipProizvoda> TipProizvoda { get; set; }
        public virtual DbSet<Gradovi> Gradovi { get; set; }
        public virtual DbSet<Spol> Spol { get; set; }
        public virtual DbSet<Proizvodi> Proizvodi { get; set; }
        public virtual DbSet<View_TopSellingProducts> View_TopSellingProducts { get; set; }
    
        public virtual int esp_KorisniciUloge_Insert(Nullable<int> korisnikID, Nullable<int> ulogaID)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            var ulogaIDParameter = ulogaID.HasValue ?
                new ObjectParameter("UlogaID", ulogaID) :
                new ObjectParameter("UlogaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_KorisniciUloge_Insert", korisnikIDParameter, ulogaIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> esp_Korisnici_Insert(string ime, string prezime, string mail, string telefon, string korisnickoIme, string lozinkaSalt, string lozinkaHash, Nullable<int> spolID, Nullable<int> gradID)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("KorisnickoIme", korisnickoIme) :
                new ObjectParameter("KorisnickoIme", typeof(string));
    
            var lozinkaSaltParameter = lozinkaSalt != null ?
                new ObjectParameter("LozinkaSalt", lozinkaSalt) :
                new ObjectParameter("LozinkaSalt", typeof(string));
    
            var lozinkaHashParameter = lozinkaHash != null ?
                new ObjectParameter("LozinkaHash", lozinkaHash) :
                new ObjectParameter("LozinkaHash", typeof(string));
    
            var spolIDParameter = spolID.HasValue ?
                new ObjectParameter("SpolID", spolID) :
                new ObjectParameter("SpolID", typeof(int));
    
            var gradIDParameter = gradID.HasValue ?
                new ObjectParameter("GradID", gradID) :
                new ObjectParameter("GradID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("esp_Korisnici_Insert", imeParameter, prezimeParameter, mailParameter, telefonParameter, korisnickoImeParameter, lozinkaSaltParameter, lozinkaHashParameter, spolIDParameter, gradIDParameter);
        }
    
        public virtual ObjectResult<Korisnici> esp_Korisnici_SelectByImePrezime(string imePrezime)
        {
            var imePrezimeParameter = imePrezime != null ?
                new ObjectParameter("ImePrezime", imePrezime) :
                new ObjectParameter("ImePrezime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("esp_Korisnici_SelectByImePrezime", imePrezimeParameter);
        }
    
        public virtual ObjectResult<Korisnici> esp_Korisnici_SelectByImePrezime(string imePrezime, MergeOption mergeOption)
        {
            var imePrezimeParameter = imePrezime != null ?
                new ObjectParameter("ImePrezime", imePrezime) :
                new ObjectParameter("ImePrezime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("esp_Korisnici_SelectByImePrezime", mergeOption, imePrezimeParameter);
        }
    
        public virtual ObjectResult<Korisnici> esp_Korisnici_SelectByUsername(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("esp_Korisnici_SelectByUsername", usernameParameter);
        }
    
        public virtual ObjectResult<Korisnici> esp_Korisnici_SelectByUsername(string username, MergeOption mergeOption)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("esp_Korisnici_SelectByUsername", mergeOption, usernameParameter);
        }
    
        public virtual ObjectResult<Korisnici> esp_Korisnik_SelectById(Nullable<int> korisnikId)
        {
            var korisnikIdParameter = korisnikId.HasValue ?
                new ObjectParameter("KorisnikId", korisnikId) :
                new ObjectParameter("KorisnikId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("esp_Korisnik_SelectById", korisnikIdParameter);
        }
    
        public virtual ObjectResult<Korisnici> esp_Korisnik_SelectById(Nullable<int> korisnikId, MergeOption mergeOption)
        {
            var korisnikIdParameter = korisnikId.HasValue ?
                new ObjectParameter("KorisnikId", korisnikId) :
                new ObjectParameter("KorisnikId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("esp_Korisnik_SelectById", mergeOption, korisnikIdParameter);
        }
    
        public virtual int esp_KorisniciUloge_Delete(Nullable<int> korisnikID)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_KorisniciUloge_Delete", korisnikIDParameter);
        }
    
        public virtual ObjectResult<esp_SelectProizvodiByVrstaModelTip_Result> esp_SelectProizvodiByVrstaModelTip(string vrsta, string model, string tip)
        {
            var vrstaParameter = vrsta != null ?
                new ObjectParameter("vrsta", vrsta) :
                new ObjectParameter("vrsta", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var tipParameter = tip != null ?
                new ObjectParameter("tip", tip) :
                new ObjectParameter("tip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_SelectProizvodiByVrstaModelTip_Result>("esp_SelectProizvodiByVrstaModelTip", vrstaParameter, modelParameter, tipParameter);
        }
    
        public virtual int esp_Dobavljaci_Insert(string naziv, string kontakt, string mail, string telefon, string fax, string adresa, string web, Nullable<bool> statusa, string ziroRacun, string napomena)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var kontaktParameter = kontakt != null ?
                new ObjectParameter("Kontakt", kontakt) :
                new ObjectParameter("Kontakt", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            var webParameter = web != null ?
                new ObjectParameter("Web", web) :
                new ObjectParameter("Web", typeof(string));
    
            var statusaParameter = statusa.HasValue ?
                new ObjectParameter("Statusa", statusa) :
                new ObjectParameter("Statusa", typeof(bool));
    
            var ziroRacunParameter = ziroRacun != null ?
                new ObjectParameter("ZiroRacun", ziroRacun) :
                new ObjectParameter("ZiroRacun", typeof(string));
    
            var napomenaParameter = napomena != null ?
                new ObjectParameter("Napomena", napomena) :
                new ObjectParameter("Napomena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Dobavljaci_Insert", nazivParameter, kontaktParameter, mailParameter, telefonParameter, faxParameter, adresaParameter, webParameter, statusaParameter, ziroRacunParameter, napomenaParameter);
        }
    
        public virtual ObjectResult<Dobavljaci> esp_Dobavljaci_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dobavljaci>("esp_Dobavljaci_GetAll");
        }
    
        public virtual ObjectResult<Dobavljaci> esp_Dobavljaci_GetAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dobavljaci>("esp_Dobavljaci_GetAll", mergeOption);
        }
    
        public virtual int esp_Skladista_SelectAll(string naziv, string opis, string adresa)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var opisParameter = opis != null ?
                new ObjectParameter("Opis", opis) :
                new ObjectParameter("Opis", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Skladista_SelectAll", nazivParameter, opisParameter, adresaParameter);
        }
    
        public virtual int esp_Skladista_Insert(string naziv, string opis, string adresa)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var opisParameter = opis != null ?
                new ObjectParameter("Opis", opis) :
                new ObjectParameter("Opis", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Skladista_Insert", nazivParameter, opisParameter, adresaParameter);
        }
    
        public virtual ObjectResult<Kupci> esp_Kupci_SelectByImePrezime(string imePrezime)
        {
            var imePrezimeParameter = imePrezime != null ?
                new ObjectParameter("ImePrezime", imePrezime) :
                new ObjectParameter("ImePrezime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kupci>("esp_Kupci_SelectByImePrezime", imePrezimeParameter);
        }
    
        public virtual ObjectResult<Kupci> esp_Kupci_SelectByImePrezime(string imePrezime, MergeOption mergeOption)
        {
            var imePrezimeParameter = imePrezime != null ?
                new ObjectParameter("ImePrezime", imePrezime) :
                new ObjectParameter("ImePrezime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kupci>("esp_Kupci_SelectByImePrezime", mergeOption, imePrezimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> esp_GetPoizvodIDBySifra(string sifra)
        {
            var sifraParameter = sifra != null ?
                new ObjectParameter("Sifra", sifra) :
                new ObjectParameter("Sifra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("esp_GetPoizvodIDBySifra", sifraParameter);
        }
    
        public virtual int esp_UlaziInsert(string brojFakture, Nullable<System.DateTime> datum, Nullable<decimal> iznosRacuna, Nullable<int> dobavljacID, Nullable<int> korisnikID, Nullable<int> skladisteID, string napomena, Nullable<decimal> pdv)
        {
            var brojFaktureParameter = brojFakture != null ?
                new ObjectParameter("BrojFakture", brojFakture) :
                new ObjectParameter("BrojFakture", typeof(string));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var iznosRacunaParameter = iznosRacuna.HasValue ?
                new ObjectParameter("IznosRacuna", iznosRacuna) :
                new ObjectParameter("IznosRacuna", typeof(decimal));
    
            var dobavljacIDParameter = dobavljacID.HasValue ?
                new ObjectParameter("DobavljacID", dobavljacID) :
                new ObjectParameter("DobavljacID", typeof(int));
    
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            var skladisteIDParameter = skladisteID.HasValue ?
                new ObjectParameter("SkladisteID", skladisteID) :
                new ObjectParameter("SkladisteID", typeof(int));
    
            var napomenaParameter = napomena != null ?
                new ObjectParameter("Napomena", napomena) :
                new ObjectParameter("Napomena", typeof(string));
    
            var pdvParameter = pdv.HasValue ?
                new ObjectParameter("Pdv", pdv) :
                new ObjectParameter("Pdv", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_UlaziInsert", brojFaktureParameter, datumParameter, iznosRacunaParameter, dobavljacIDParameter, korisnikIDParameter, skladisteIDParameter, napomenaParameter, pdvParameter);
        }
    
        public virtual int esp_UlaziStavke_Insert(Nullable<decimal> cijena, Nullable<int> kolicina, Nullable<int> proizvodID, Nullable<int> ulazID)
        {
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("Cijena", cijena) :
                new ObjectParameter("Cijena", typeof(decimal));
    
            var kolicinaParameter = kolicina.HasValue ?
                new ObjectParameter("Kolicina", kolicina) :
                new ObjectParameter("Kolicina", typeof(int));
    
            var proizvodIDParameter = proizvodID.HasValue ?
                new ObjectParameter("ProizvodID", proizvodID) :
                new ObjectParameter("ProizvodID", typeof(int));
    
            var ulazIDParameter = ulazID.HasValue ?
                new ObjectParameter("UlazID", ulazID) :
                new ObjectParameter("UlazID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_UlaziStavke_Insert", cijenaParameter, kolicinaParameter, proizvodIDParameter, ulazIDParameter);
        }
    
        public virtual int esp_Kupci_Insert(string ime, string prezime, string email, string korisnickoIme, string lozinkaSalt, string lozinkaHash, Nullable<System.DateTime> datumRegistracije, Nullable<bool> status)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("KorisnickoIme", korisnickoIme) :
                new ObjectParameter("KorisnickoIme", typeof(string));
    
            var lozinkaSaltParameter = lozinkaSalt != null ?
                new ObjectParameter("LozinkaSalt", lozinkaSalt) :
                new ObjectParameter("LozinkaSalt", typeof(string));
    
            var lozinkaHashParameter = lozinkaHash != null ?
                new ObjectParameter("LozinkaHash", lozinkaHash) :
                new ObjectParameter("LozinkaHash", typeof(string));
    
            var datumRegistracijeParameter = datumRegistracije.HasValue ?
                new ObjectParameter("DatumRegistracije", datumRegistracije) :
                new ObjectParameter("DatumRegistracije", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Kupci_Insert", imeParameter, prezimeParameter, emailParameter, korisnickoImeParameter, lozinkaSaltParameter, lozinkaHashParameter, datumRegistracijeParameter, statusParameter);
        }
    
        public virtual ObjectResult<Skladista> esp_Skladista_SelectByNaziv(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Skladista>("esp_Skladista_SelectByNaziv", nazivParameter);
        }
    
        public virtual ObjectResult<Skladista> esp_Skladista_SelectByNaziv(string naziv, MergeOption mergeOption)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Skladista>("esp_Skladista_SelectByNaziv", mergeOption, nazivParameter);
        }
    
        public virtual ObjectResult<Dobavljaci> esp_Dobavljaci_SelectByNaziv(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dobavljaci>("esp_Dobavljaci_SelectByNaziv", nazivParameter);
        }
    
        public virtual ObjectResult<Dobavljaci> esp_Dobavljaci_SelectByNaziv(string naziv, MergeOption mergeOption)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dobavljaci>("esp_Dobavljaci_SelectByNaziv", mergeOption, nazivParameter);
        }
    
        public virtual ObjectResult<esp_Narudzbe_SelectAktivne_Result> esp_Narudzbe_SelectAktivne()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_Narudzbe_SelectAktivne_Result>("esp_Narudzbe_SelectAktivne");
        }
    
        public virtual ObjectResult<Nullable<int>> esp_GetPoizvodIDByNaziv(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("esp_GetPoizvodIDByNaziv", nazivParameter);
        }
    
        public virtual ObjectResult<esp_Proizvodi_SelectByVrsta_Result> esp_Proizvodi_SelectByVrsta(Nullable<int> vrstaID)
        {
            var vrstaIDParameter = vrstaID.HasValue ?
                new ObjectParameter("VrstaID", vrstaID) :
                new ObjectParameter("VrstaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_Proizvodi_SelectByVrsta_Result>("esp_Proizvodi_SelectByVrsta", vrstaIDParameter);
        }
    
        public virtual ObjectResult<esp_Proizvodi_SelectById_Result> esp_Proizvodi_SelectById(Nullable<int> proizvodID)
        {
            var proizvodIDParameter = proizvodID.HasValue ?
                new ObjectParameter("ProizvodID", proizvodID) :
                new ObjectParameter("ProizvodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_Proizvodi_SelectById_Result>("esp_Proizvodi_SelectById", proizvodIDParameter);
        }
    
        public virtual int esp_NarudzbaStavke_Insert(Nullable<int> narudzbaID, Nullable<int> proizvodID, Nullable<int> kolicina)
        {
            var narudzbaIDParameter = narudzbaID.HasValue ?
                new ObjectParameter("NarudzbaID", narudzbaID) :
                new ObjectParameter("NarudzbaID", typeof(int));
    
            var proizvodIDParameter = proizvodID.HasValue ?
                new ObjectParameter("ProizvodID", proizvodID) :
                new ObjectParameter("ProizvodID", typeof(int));
    
            var kolicinaParameter = kolicina.HasValue ?
                new ObjectParameter("Kolicina", kolicina) :
                new ObjectParameter("Kolicina", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_NarudzbaStavke_Insert", narudzbaIDParameter, proizvodIDParameter, kolicinaParameter);
        }
    
        public virtual ObjectResult<esp_HistorijaNarudzbiByKupacID_Result> esp_HistorijaNarudzbiByKupacID(Nullable<int> kupacId)
        {
            var kupacIdParameter = kupacId.HasValue ?
                new ObjectParameter("kupacId", kupacId) :
                new ObjectParameter("kupacId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_HistorijaNarudzbiByKupacID_Result>("esp_HistorijaNarudzbiByKupacID", kupacIdParameter);
        }
    
        public virtual ObjectResult<esp_Kupac_SelectById_Result> esp_Kupac_SelectById(Nullable<int> kupacId)
        {
            var kupacIdParameter = kupacId.HasValue ?
                new ObjectParameter("KupacId", kupacId) :
                new ObjectParameter("KupacId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_Kupac_SelectById_Result>("esp_Kupac_SelectById", kupacIdParameter);
        }
    
        public virtual ObjectResult<esp_Korisnici_SelectAll_Result> esp_Korisnici_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_Korisnici_SelectAll_Result>("esp_Korisnici_SelectAll");
        }
    
        public virtual ObjectResult<Uloge> esp_Uloge_SelectByKorisnikId(Nullable<int> korisnikId)
        {
            var korisnikIdParameter = korisnikId.HasValue ?
                new ObjectParameter("KorisnikId", korisnikId) :
                new ObjectParameter("KorisnikId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Uloge>("esp_Uloge_SelectByKorisnikId", korisnikIdParameter);
        }
    
        public virtual ObjectResult<Uloge> esp_Uloge_SelectByKorisnikId(Nullable<int> korisnikId, MergeOption mergeOption)
        {
            var korisnikIdParameter = korisnikId.HasValue ?
                new ObjectParameter("KorisnikId", korisnikId) :
                new ObjectParameter("KorisnikId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Uloge>("esp_Uloge_SelectByKorisnikId", mergeOption, korisnikIdParameter);
        }
    
        public virtual int esp_Korisnici_Update(string ime, string prezime, string mail, string telefon, string korisnickoIme, string lozinkaSalt, string lozinkaHash, Nullable<int> korisnikID, Nullable<int> spolID, Nullable<int> gradID)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("KorisnickoIme", korisnickoIme) :
                new ObjectParameter("KorisnickoIme", typeof(string));
    
            var lozinkaSaltParameter = lozinkaSalt != null ?
                new ObjectParameter("LozinkaSalt", lozinkaSalt) :
                new ObjectParameter("LozinkaSalt", typeof(string));
    
            var lozinkaHashParameter = lozinkaHash != null ?
                new ObjectParameter("LozinkaHash", lozinkaHash) :
                new ObjectParameter("LozinkaHash", typeof(string));
    
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            var spolIDParameter = spolID.HasValue ?
                new ObjectParameter("SpolID", spolID) :
                new ObjectParameter("SpolID", typeof(int));
    
            var gradIDParameter = gradID.HasValue ?
                new ObjectParameter("GradID", gradID) :
                new ObjectParameter("GradID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Korisnici_Update", imeParameter, prezimeParameter, mailParameter, telefonParameter, korisnickoImeParameter, lozinkaSaltParameter, lozinkaHashParameter, korisnikIDParameter, spolIDParameter, gradIDParameter);
        }
    
        public virtual int esp_Proizvodi_Update(Nullable<int> id, string naziv, string sifra, Nullable<decimal> cijena, Nullable<int> vrstaProizvoda, byte[] slika, byte[] slikaThumb, Nullable<int> tipID, Nullable<int> modelID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var sifraParameter = sifra != null ?
                new ObjectParameter("Sifra", sifra) :
                new ObjectParameter("Sifra", typeof(string));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("Cijena", cijena) :
                new ObjectParameter("Cijena", typeof(decimal));
    
            var vrstaProizvodaParameter = vrstaProizvoda.HasValue ?
                new ObjectParameter("VrstaProizvoda", vrstaProizvoda) :
                new ObjectParameter("VrstaProizvoda", typeof(int));
    
            var slikaParameter = slika != null ?
                new ObjectParameter("Slika", slika) :
                new ObjectParameter("Slika", typeof(byte[]));
    
            var slikaThumbParameter = slikaThumb != null ?
                new ObjectParameter("SlikaThumb", slikaThumb) :
                new ObjectParameter("SlikaThumb", typeof(byte[]));
    
            var tipIDParameter = tipID.HasValue ?
                new ObjectParameter("TipID", tipID) :
                new ObjectParameter("TipID", typeof(int));
    
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Proizvodi_Update", idParameter, nazivParameter, sifraParameter, cijenaParameter, vrstaProizvodaParameter, slikaParameter, slikaThumbParameter, tipIDParameter, modelIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> esp_GetSkladisteIDByNaziv(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("esp_GetSkladisteIDByNaziv", nazivParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> esp_GetDobavljacIDByNaziv(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("esp_GetDobavljacIDByNaziv", nazivParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> esp_GetDobavljacIDByZiroRacun(string ziroRacun)
        {
            var ziroRacunParameter = ziroRacun != null ?
                new ObjectParameter("ZiroRacun", ziroRacun) :
                new ObjectParameter("ZiroRacun", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("esp_GetDobavljacIDByZiroRacun", ziroRacunParameter);
        }
    
        public virtual int esp_SkladisteStanje_Update(Nullable<int> proizvodID, Nullable<int> kolicina)
        {
            var proizvodIDParameter = proizvodID.HasValue ?
                new ObjectParameter("ProizvodID", proizvodID) :
                new ObjectParameter("ProizvodID", typeof(int));
    
            var kolicinaParameter = kolicina.HasValue ?
                new ObjectParameter("Kolicina", kolicina) :
                new ObjectParameter("Kolicina", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_SkladisteStanje_Update", proizvodIDParameter, kolicinaParameter);
        }
    
        public virtual int esp_Izlazi_InsertByNarudzbaID(Nullable<int> narudzbaID, Nullable<decimal> iznosSaPDV, Nullable<decimal> iznosBezPDV, Nullable<int> skladisteID, Nullable<int> korisnikID)
        {
            var narudzbaIDParameter = narudzbaID.HasValue ?
                new ObjectParameter("NarudzbaID", narudzbaID) :
                new ObjectParameter("NarudzbaID", typeof(int));
    
            var iznosSaPDVParameter = iznosSaPDV.HasValue ?
                new ObjectParameter("IznosSaPDV", iznosSaPDV) :
                new ObjectParameter("IznosSaPDV", typeof(decimal));
    
            var iznosBezPDVParameter = iznosBezPDV.HasValue ?
                new ObjectParameter("IznosBezPDV", iznosBezPDV) :
                new ObjectParameter("IznosBezPDV", typeof(decimal));
    
            var skladisteIDParameter = skladisteID.HasValue ?
                new ObjectParameter("SkladisteID", skladisteID) :
                new ObjectParameter("SkladisteID", typeof(int));
    
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Izlazi_InsertByNarudzbaID", narudzbaIDParameter, iznosSaPDVParameter, iznosBezPDVParameter, skladisteIDParameter, korisnikIDParameter);
        }
    
        public virtual ObjectResult<Proizvodi> esp_Proizvodi_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proizvodi>("esp_Proizvodi_Select");
        }
    
        public virtual ObjectResult<Proizvodi> esp_Proizvodi_Select(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proizvodi>("esp_Proizvodi_Select", mergeOption);
        }
    
        public virtual ObjectResult<esp_Narudzbe_SelectByKupacId_Result> esp_Narudzbe_SelectByKupacId(Nullable<int> kupacId)
        {
            var kupacIdParameter = kupacId.HasValue ?
                new ObjectParameter("kupacId", kupacId) :
                new ObjectParameter("kupacId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_Narudzbe_SelectByKupacId_Result>("esp_Narudzbe_SelectByKupacId", kupacIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> esp_SkladistaProizvod_ProvjeraStanja(Nullable<int> proizvodID, Nullable<int> skladisteID)
        {
            var proizvodIDParameter = proizvodID.HasValue ?
                new ObjectParameter("ProizvodID", proizvodID) :
                new ObjectParameter("ProizvodID", typeof(int));
    
            var skladisteIDParameter = skladisteID.HasValue ?
                new ObjectParameter("SkladisteID", skladisteID) :
                new ObjectParameter("SkladisteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("esp_SkladistaProizvod_ProvjeraStanja", proizvodIDParameter, skladisteIDParameter);
        }
    
        public virtual ObjectResult<esp_NarudzbeStavke_SelectByNarudzbaID_Result> esp_NarudzbeStavke_SelectByNarudzbaID(Nullable<int> narudzbaID)
        {
            var narudzbaIDParameter = narudzbaID.HasValue ?
                new ObjectParameter("NarudzbaID", narudzbaID) :
                new ObjectParameter("NarudzbaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_NarudzbeStavke_SelectByNarudzbaID_Result>("esp_NarudzbeStavke_SelectByNarudzbaID", narudzbaIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> esp_Narudzbe_Insert(Nullable<int> kupacID)
        {
            var kupacIDParameter = kupacID.HasValue ?
                new ObjectParameter("KupacID", kupacID) :
                new ObjectParameter("KupacID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("esp_Narudzbe_Insert", kupacIDParameter);
        }
    
        public virtual ObjectResult<esp_Narudzbe_SelectByDatum_Result> esp_Narudzbe_SelectByDatum(Nullable<System.DateTime> datumOd, Nullable<System.DateTime> datumDo)
        {
            var datumOdParameter = datumOd.HasValue ?
                new ObjectParameter("DatumOd", datumOd) :
                new ObjectParameter("DatumOd", typeof(System.DateTime));
    
            var datumDoParameter = datumDo.HasValue ?
                new ObjectParameter("DatumDo", datumDo) :
                new ObjectParameter("DatumDo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_Narudzbe_SelectByDatum_Result>("esp_Narudzbe_SelectByDatum", datumOdParameter, datumDoParameter);
        }
    
        public virtual ObjectResult<esp_Narudzbe_TotalByYearAndMonth_Result> esp_Narudzbe_TotalByYearAndMonth()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_Narudzbe_TotalByYearAndMonth_Result>("esp_Narudzbe_TotalByYearAndMonth");
        }
    
        public virtual int esp_Proizvodi_Insert(string naziv, string sifra, Nullable<decimal> cijena, Nullable<int> vrstaProizvoda, Nullable<int> tipID, Nullable<int> modelID, byte[] slika, byte[] slikaThumb)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var sifraParameter = sifra != null ?
                new ObjectParameter("Sifra", sifra) :
                new ObjectParameter("Sifra", typeof(string));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("Cijena", cijena) :
                new ObjectParameter("Cijena", typeof(decimal));
    
            var vrstaProizvodaParameter = vrstaProizvoda.HasValue ?
                new ObjectParameter("VrstaProizvoda", vrstaProizvoda) :
                new ObjectParameter("VrstaProizvoda", typeof(int));
    
            var tipIDParameter = tipID.HasValue ?
                new ObjectParameter("TipID", tipID) :
                new ObjectParameter("TipID", typeof(int));
    
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            var slikaParameter = slika != null ?
                new ObjectParameter("Slika", slika) :
                new ObjectParameter("Slika", typeof(byte[]));
    
            var slikaThumbParameter = slikaThumb != null ?
                new ObjectParameter("SlikaThumb", slikaThumb) :
                new ObjectParameter("SlikaThumb", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Proizvodi_Insert", nazivParameter, sifraParameter, cijenaParameter, vrstaProizvodaParameter, tipIDParameter, modelIDParameter, slikaParameter, slikaThumbParameter);
        }
    }
}
